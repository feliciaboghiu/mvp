{"ast":null,"code":"var _jsxFileName = \"/Users/feliciaboghiu/Desktop/FE/mvp/client/src/components/validatedLoginForm.js\";\nimport React from 'react';\nimport { Formik } from 'formik';\nimport * as EmailValidator from 'email-validator';\nimport * as Yup from 'yup';\nimport './components/loginForm.css';\n\nconst ValidatedLoginForm = () => /*#__PURE__*/React.createElement(Formik, {\n  initialValues: {\n    email: \"\",\n    password: \"\"\n  },\n  onSubmit: (values, {\n    setSubmitting\n  }) => {\n    setTimeout(() => {\n      console.log(\"Logging in\", values);\n      setSubmitting(false);\n    }, 500);\n  },\n  validationSchema: yup.object().shape({\n    email: Yup.string().email().required(\"Required\"),\n    password: Yup.string().required(\"No password provided.\").min(8, \"Password is too short - should be 8 chars minimum.\").matches(/(?=.*[0-9])/, \"Password must contain a number.\")\n  }),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }\n}, props => {\n  const {\n    values,\n    touched,\n    errors,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit\n  } = props;\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }\n  }, \"Email\"), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"email\",\n    type: \"text\",\n    placeholder: \"Enter your email\",\n    value: values.email,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    className: errors.email && touched.email && \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }\n  }), errors.email && touched.email && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 21\n    }\n  }, errors.email), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }, \"Password\"), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"password\",\n    type: \"password\",\n    placeholder: \"Enter your password\",\n    value: values.password,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    className: errors.password && touched.password && \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  }), errors.password && touched.password && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 21\n    }\n  }, errors.password), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    disabled: isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }, \"Login\"));\n});\n\nexport default ValidatedLoginForm;","map":{"version":3,"sources":["/Users/feliciaboghiu/Desktop/FE/mvp/client/src/components/validatedLoginForm.js"],"names":["React","Formik","EmailValidator","Yup","ValidatedLoginForm","email","password","values","setSubmitting","setTimeout","console","log","yup","object","shape","string","required","min","matches","props","touched","errors","isSubmitting","handleChange","handleBlur","handleSubmit"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAO,KAAKC,cAAZ,MAAgC,iBAAhC;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAO,4BAAP;;AAEA,MAAMC,kBAAkB,GAAG,mBACvB,oBAAC,MAAD;AACI,EAAA,aAAa,EAAE;AAAEC,IAAAA,KAAK,EAAE,EAAT;AAAaC,IAAAA,QAAQ,EAAE;AAAvB,GADnB;AAEI,EAAA,QAAQ,EAAG,CAACC,MAAD,EAAS;AAAEC,IAAAA;AAAF,GAAT,KAA+B;AACtCC,IAAAA,UAAU,CAAC,MAAM;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BJ,MAA1B;AACAC,MAAAA,aAAa,CAAC,KAAD,CAAb;AACH,KAHa,EAGX,GAHW,CAAV;AAIP,GAPD;AASA,EAAA,gBAAgB,EAAEI,GAAG,CAACC,MAAJ,GAAaC,KAAb,CAAmB;AACjCT,IAAAA,KAAK,EAAEF,GAAG,CAACY,MAAJ,GACFV,KADE,GAEFW,QAFE,CAEO,UAFP,CAD0B;AAIjCV,IAAAA,QAAQ,EAAEH,GAAG,CAACY,MAAJ,GACLC,QADK,CACI,uBADJ,EAELC,GAFK,CAED,CAFC,EAEE,oDAFF,EAGLC,OAHK,CAGG,aAHH,EAGkB,iCAHlB;AAJuB,GAAnB,CATlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAmBCC,KAAK,IAAI;AACN,QAAM;AACFZ,IAAAA,MADE;AAEFa,IAAAA,OAFE;AAGFC,IAAAA,MAHE;AAGMC,IAAAA,YAHN;AAIFC,IAAAA,YAJE;AAIYC,IAAAA,UAJZ;AAKFC,IAAAA;AALE,MAMFN,KANJ;AAOA,sBACI;AAAM,IAAA,QAAQ,EAAEM,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,eAEI;AACI,IAAA,IAAI,EAAC,OADT;AAEI,IAAA,IAAI,EAAC,MAFT;AAGI,IAAA,WAAW,EAAC,kBAHhB;AAII,IAAA,KAAK,EAAElB,MAAM,CAACF,KAJlB;AAKI,IAAA,QAAQ,EAAEkB,YALd;AAMI,IAAA,MAAM,EAAEC,UANZ;AAOI,IAAA,SAAS,EAAEH,MAAM,CAAChB,KAAP,IAAgBe,OAAO,CAACf,KAAxB,IAAiC,OAPhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAWKgB,MAAM,CAAChB,KAAP,IAAgBe,OAAO,CAACf,KAAxB,iBACG;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiCgB,MAAM,CAAChB,KAAxC,CAZR,eAcI;AAAO,IAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAdJ,eAeI;AACI,IAAA,IAAI,EAAC,UADT;AAEI,IAAA,IAAI,EAAC,UAFT;AAGI,IAAA,WAAW,EAAC,qBAHhB;AAII,IAAA,KAAK,EAAEE,MAAM,CAACD,QAJlB;AAKI,IAAA,QAAQ,EAAEiB,YALd;AAMI,IAAA,MAAM,EAAEC,UANZ;AAOI,IAAA,SAAS,EAAEH,MAAM,CAACf,QAAP,IAAmBc,OAAO,CAACd,QAA3B,IAAuC,OAPtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfJ,EAwBKe,MAAM,CAACf,QAAP,IAAmBc,OAAO,CAACd,QAA3B,iBACG;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiCe,MAAM,CAACf,QAAxC,CAzBR,eA2BI;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,QAAQ,EAAEgB,YAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aA3BJ,CADJ;AAiCH,CA5DD,CADJ;;AAiEA,eAAelB,kBAAf","sourcesContent":["import React from 'react';\nimport { Formik } from 'formik';\nimport * as EmailValidator from 'email-validator';\nimport * as Yup from 'yup';\nimport './components/loginForm.css';\n\nconst ValidatedLoginForm = () => (\n    <Formik\n        initialValues={{ email: \"\", password: \"\" }}\n        onSubmit ={(values, { setSubmitting }) => {\n            setTimeout(() => {\n            console.log(\"Logging in\", values);\n            setSubmitting(false);\n        }, 500);\n    }} \n    \n    validationSchema={yup.object().shape({\n        email: Yup.string()\n            .email()\n            .required(\"Required\"),\n        password: Yup.string()\n            .required(\"No password provided.\")\n            .min(8, \"Password is too short - should be 8 chars minimum.\")\n            .matches(/(?=.*[0-9])/, \"Password must contain a number.\")\n    })}\n>\n    {props => {\n        const {\n            values,\n            touched,\n            errors, isSubmitting,\n            handleChange, handleBlur,\n            handleSubmit\n        } = props;\n        return (\n            <form onSubmit={handleSubmit}>\n                <label htmlFor=\"email\">Email</label>\n                <input\n                    name=\"email\"\n                    type=\"text\"\n                    placeholder=\"Enter your email\"\n                    value={values.email}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    className={errors.email && touched.email && \"error\"}\n                />\n                {errors.email && touched.email && (\n                    <div className=\"input-feedback\">{errors.email}</div>\n                )}\n                <label htmlFor=\"email\">Password</label>\n                <input\n                    name=\"password\"\n                    type=\"password\"\n                    placeholder=\"Enter your password\"\n                    value={values.password}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    className={errors.password && touched.password && \"error\"}\n                />\n                {errors.password && touched.password && (\n                    <div className=\"input-feedback\">{errors.password}</div>\n                )}\n                <button type=\"submit\" disabled={isSubmitting}>\n                    Login\n                </button>\n            </form>\n        );\n    }}\n</Formik>\n);\n\nexport default ValidatedLoginForm;"]},"metadata":{},"sourceType":"module"}