{"ast":null,"code":"var _jsxFileName = \"/Users/feliciaboghiu/Desktop/FE/mvp/client/src/components/validatedLoginForm.js\";\nimport React from 'react';\nimport { Formik } from 'formik';\nimport * as EmailValidator from 'email-validator';\nimport * as Yup from 'yup';\nimport './loginForm.css';\nEmailValidator.validate(\"test@email.com\");\n\nasync function fetchNewTextC(email, password) {\n  await new Promise(r => setTimeout(r, 500));\n  return `textA: ${a}, textB: ${b}`;\n}\n\nclass ValidatedLoginForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      password: ''\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Formik, {\n      initialValues: {\n        email: \"\",\n        password: \"\"\n      },\n      onSubmit: (values, {\n        setSubmitting\n      }) => {\n        setTimeout(() => {\n          console.log(\"Logging in\", values);\n          setSubmitting(false);\n        }, 500);\n      },\n      validationSchema: Yup.object().shape({\n        email: Yup.string().email().required(\"Required\"),\n        password: Yup.string().required(\"No password provided.\").min(8, \"Password is too short - should be 8 chars minimum.\").matches(/(?=.*[0-9])/, \"Password must contain a number.\")\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }\n    }, props => {\n      const {\n        values,\n        touched,\n        errors,\n        isSubmitting,\n        handleChange,\n        handleBlur,\n        handleSubmit\n      } = props;\n      return /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: handleSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"email\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }\n      }, \"Email\"), /*#__PURE__*/React.createElement(\"input\", {\n        name: \"email\",\n        type: \"text\",\n        placeholder: \"Enter your email\",\n        value: values.email,\n        onChange: handleChange,\n        onBlur: handleBlur,\n        className: errors.email && touched.email && \"error\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }\n      }), errors.email && touched.email && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 25\n        }\n      }, errors.email), /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"email\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }\n      }, \"Password\"), /*#__PURE__*/React.createElement(\"input\", {\n        name: \"password\",\n        type: \"password\",\n        placeholder: \"Enter your password\",\n        value: values.password,\n        onChange: handleChange,\n        onBlur: handleBlur,\n        className: errors.password && touched.password && \"error\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }\n      }), errors.password && touched.password && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }\n      }, errors.password), /*#__PURE__*/React.createElement(\"button\", {\n        type: \"submit\",\n        disabled: isSubmitting,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }\n      }, \"Login\"));\n    });\n  }\n\n}\n\n;\nexport default ValidatedLoginForm;","map":{"version":3,"sources":["/Users/feliciaboghiu/Desktop/FE/mvp/client/src/components/validatedLoginForm.js"],"names":["React","Formik","EmailValidator","Yup","validate","fetchNewTextC","email","password","Promise","r","setTimeout","a","b","ValidatedLoginForm","Component","constructor","props","state","render","values","setSubmitting","console","log","object","shape","string","required","min","matches","touched","errors","isSubmitting","handleChange","handleBlur","handleSubmit"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Formik } from 'formik';\nimport * as EmailValidator from 'email-validator';\nimport * as Yup from 'yup';\nimport './loginForm.css';\nEmailValidator.validate(\"test@email.com\");\n\nasync function fetchNewTextC(email, password) {\n    await new Promise(r => setTimeout(r, 500));\n    return `textA: ${a}, textB: ${b}`;\n  }\n\nclass ValidatedLoginForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = ({\n            email: '',\n            password: ''\n        });\n    }\n\n    render() {\n        return (\n            <Formik\n            initialValues={{ email: \"\", password: \"\" }}\n            onSubmit ={(values, { setSubmitting }) => {\n                setTimeout(() => {\n                console.log(\"Logging in\", values);\n                setSubmitting(false);\n            }, 500);\n        }} \n        \n        validationSchema={Yup.object().shape({\n            email: Yup.string()\n                .email()\n                .required(\"Required\"),\n            password: Yup.string()\n                .required(\"No password provided.\")\n                .min(8, \"Password is too short - should be 8 chars minimum.\")\n                .matches(/(?=.*[0-9])/, \"Password must contain a number.\")\n        })}\n    >\n        {props => {\n            const {\n                values,\n                touched,\n                errors,\n                isSubmitting,\n                handleChange,\n                handleBlur,\n                handleSubmit\n            } = props;\n            return (\n                <form onSubmit={handleSubmit}>\n                    <label htmlFor=\"email\">Email</label>\n                    <input\n                        name=\"email\"\n                        type=\"text\"\n                        placeholder=\"Enter your email\"\n                        value={values.email}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={errors.email && touched.email && \"error\"}\n                    />\n                    {errors.email && touched.email && (\n                        <div className=\"input-feedback\">{errors.email}</div>\n                    )}\n                    <label htmlFor=\"email\">Password</label>\n                    <input\n                        name=\"password\"\n                        type=\"password\"\n                        placeholder=\"Enter your password\"\n                        value={values.password}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        className={errors.password && touched.password && \"error\"}\n                    />\n                    {errors.password && touched.password && (\n                        <div className=\"input-feedback\">{errors.password}</div>\n                    )}\n                    <button type=\"submit\" disabled={isSubmitting}>\n                        Login\n                    </button>\n                </form>\n                    );\n                }}\n            </Formik>\n        )\n    }\n};\n\nexport default ValidatedLoginForm;"]},"metadata":{},"sourceType":"module"}