{"ast":null,"code":"var _jsxFileName = \"/Users/feliciaboghiu/Desktop/FE/mvp/client/src/components/validatedLoginForm.js\";\nimport React from 'react';\nimport { Formik } from 'formik';\nimport * as EmailValidator from 'email-validator';\nimport * as Yup from 'yup';\nimport './loginForm.css';\nEmailValidator.validate(\"test@email.com\");\n\nclass ValidatedLoginForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      password: ''\n    };\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    console.log(\"Submitting\"); // console.log(this.state);\n\n    this.setState({\n      email: '',\n      password: ''\n    });\n    this.props.history.push('./mylists');\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Formik, {\n      initialValues: {\n        email: \"\",\n        password: \"\"\n      },\n      onSubmit: (values, {\n        setSubmitting\n      }) => {\n        setTimeout(() => {\n          console.log(\"Logging in\", values);\n          setSubmitting(false);\n          this.props.history.push('./mylists');\n        }, 500);\n      },\n      validationSchema: Yup.object().shape({\n        email: Yup.string().email().required(\"Required\"),\n        password: Yup.string().required(\"No password provided.\").min(8, \"Password is too short - should be 8 chars minimum.\").matches(/(?=.*[0-9])/, \"Password must contain a number.\")\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }\n    }, props => {\n      const {\n        values,\n        touched,\n        errors,\n        isSubmitting,\n        handleChange,\n        handleBlur,\n        handleSubmit\n      } = props;\n      return /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: handleSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"email\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }\n      }, \"Email\"), /*#__PURE__*/React.createElement(\"input\", {\n        name: \"email\",\n        type: \"text\",\n        placeholder: \"Enter your email\",\n        value: values.email,\n        onChange: handleChange,\n        onBlur: handleBlur,\n        className: errors.email && touched.email && \"error\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }\n      }), errors.email && touched.email && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }\n      }, errors.email), /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"email\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }\n      }, \"Password\"), /*#__PURE__*/React.createElement(\"input\", {\n        name: \"password\",\n        type: \"password\",\n        placeholder: \"Enter your password\",\n        value: values.password,\n        onChange: handleChange,\n        onBlur: handleBlur,\n        className: errors.password && touched.password && \"error\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }\n      }), errors.password && touched.password && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }\n      }, errors.password), /*#__PURE__*/React.createElement(\"button\", {\n        type: \"submit\",\n        disabled: isSubmitting,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 17\n        }\n      }, \"Login\"));\n    });\n  }\n\n}\n\n;\nexport default ValidatedLoginForm;","map":{"version":3,"sources":["/Users/feliciaboghiu/Desktop/FE/mvp/client/src/components/validatedLoginForm.js"],"names":["React","Formik","EmailValidator","Yup","validate","ValidatedLoginForm","Component","constructor","props","state","email","password","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","console","log","history","push","render","values","setSubmitting","setTimeout","object","shape","string","required","min","matches","touched","errors","isSubmitting","handleBlur"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Formik } from 'formik';\nimport * as EmailValidator from 'email-validator';\nimport * as Yup from 'yup';\nimport './loginForm.css';\nEmailValidator.validate(\"test@email.com\");\n\nclass ValidatedLoginForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = ({\n            email: '',\n            password: ''\n        });\n    }\n\n    handleChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    };\n\n    handleSubmit(event) {\n        event.preventDefault();\n        console.log(\"Submitting\");\n        // console.log(this.state);\n        this.setState({ email: '', password: '' })\n        this.props.history.push('./mylists');\n    }\n\n    render() {\n        return (\n        <Formik\n        initialValues={{ email: \"\", password: \"\" }}\n        onSubmit ={(values, { setSubmitting }) => {\n            setTimeout(() => {\n            console.log(\"Logging in\", values);\n            setSubmitting(false);\n            this.props.history.push('./mylists')\n\n        }, 500);\n    }} \n    \n    validationSchema={Yup.object().shape({\n        email: Yup.string()\n            .email()\n            .required(\"Required\"),\n        password: Yup.string()\n            .required(\"No password provided.\")\n            .min(8, \"Password is too short - should be 8 chars minimum.\")\n            .matches(/(?=.*[0-9])/, \"Password must contain a number.\")\n    })}\n>\n    {props => {\n        const {\n            values,\n            touched,\n            errors, isSubmitting,\n            handleChange, handleBlur,\n            handleSubmit\n        } = props;\n        return (\n            <form onSubmit={handleSubmit}>\n                <label htmlFor=\"email\">Email</label>\n                <input\n                    name=\"email\"\n                    type=\"text\"\n                    placeholder=\"Enter your email\"\n                    value={values.email}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    className={errors.email && touched.email && \"error\"}\n                />\n                {errors.email && touched.email && (\n                    <div className=\"input-feedback\">{errors.email}</div>\n                )}\n                <label htmlFor=\"email\">Password</label>\n                <input\n                    name=\"password\"\n                    type=\"password\"\n                    placeholder=\"Enter your password\"\n                    value={values.password}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    className={errors.password && touched.password && \"error\"}\n                />\n                {errors.password && touched.password && (\n                    <div className=\"input-feedback\">{errors.password}</div>\n                )}\n                <button type=\"submit\" disabled={isSubmitting}>\n                    Login\n                </button>\n            </form>\n                );\n            }}\n        </Formik>\n        )\n    }\n};\n\nexport default ValidatedLoginForm;"]},"metadata":{},"sourceType":"module"}