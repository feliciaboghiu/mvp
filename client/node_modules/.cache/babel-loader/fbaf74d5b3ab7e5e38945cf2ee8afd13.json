{"ast":null,"code":"var _jsxFileName = \"/Users/feliciaboghiu/Desktop/FE/mvp/client/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport ItemList from './ItemList';\nimport InsertForm from './InsertForm';\nimport NewList from './NewList';\nimport { BrowserRouter as Router, Switch, Route, NavLink, Link } from \"react-router-dom\";\nimport { withRouter } from \"react-router\";\nimport Error404View from './Error404View';\nimport EditList from './EditList';\nimport Button from 'react-bootstrap/Button';\nimport Navbar from 'react-bootstrap/Navbar'; // import Form from 'react-bootstrap/Form';\n\nimport { NavbarBrand } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // import Login from \"./components/login.js\";\n\nimport SignUp from \"./components/signUp.js\";\nimport ValidatedLoginForm from \"./components/validatedLoginForm.js\";\nconst API_URL = \"/inventarium/lists\"; // const TEST_ITEMS = [\n//   { id: 1, title: 'Albums', name: [\"The Beatles - Sgt. Pepper' Lonely Hearts Club Band\", 'The Beach Boys - Pet Sounds', \"The Beatles - Revolver\", 'Bob Dylan - Highway 61 Revisited', \"Marvin Gaye - What's Going On\", 'The Rolling Stones - Exile on Main Street']},\n//   { id: 2, title: 'Films', name: ['Good Will Hunting', 'The Royal Tenenbaums', \"Matrix\", \"The Godfather\", \"Fight Club\", \"Pulp Fiction\"]},\n//   { id: 3, title: \"Pantry\", name: ['Wild Rice', \"Black Beans\", 'Toilet paper', 'Cat food', 'Condensed Milk']}\n// ];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.addNewList = newTitle => {\n      let newList = {\n        id: this.state.nextListId,\n        title: newTitle,\n        items: []\n      };\n      this.setState({\n        lists: [...this.state.lists, newList],\n        nextListId: this.state.nextListId + 1\n      }); // Redirect to '/mylists'\n\n      this.props.history.push('/mylists');\n    };\n\n    this.state = {\n      lists: [],\n      newList: \"\",\n      nextListId: 6,\n      editedListId: null,\n      list: null,\n      isShown: false,\n      showLogIn: true\n    };\n  }\n\n  componentDidMount() {\n    fetch(API_URL).then(res => res.json()).then(json => {\n      // Upon success, update lists\n      this.setState({\n        lists: json\n      });\n    }).catch(error => {\n      // upon failure, show error message\n      console.log(\"Error\");\n    });\n  }\n\n  async addNewItem(newItem, list_id) {\n    // copy lists\n    let newItems = [...this.state.lists.item]; // find the index of the list using listId\n\n    let newIx = newItem.findIndex(l => l.id === list_id); // get that specific list using the index\n\n    let newList = newItems[newIx]; // add newItem to that list  \n\n    newList.items.push(newItem); // POST\n\n    let options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newLists)\n    };\n\n    try {\n      let response = await fetch(API_URL, options);\n\n      if (response.ok) {\n        let newLists = await response.json();\n        this.setState({\n          lists: newLists\n        });\n      } else {\n        console.log(\"ERROR:\", response.status, response.statusText);\n      }\n    } catch (err) {\n      console.log(\"EXCEPTION:\", err.message);\n    }\n\n    this.props.history.push('/mylists');\n  } // addNewItem = (newItem, list_id) => {\n  //   // copy lists\n  //   let newLists = [...this.state.lists];\n  //   // find the index of the list using list_id\n  //   let newIx = newLists.findIndex((l) => l.id === list_id);\n  //   // get that specific list using the index\n  //   let newList = newLists[newIx];\n  //   // add newItem to that list  \n  //   newList.item.push(newItem)\n  //   // update state replacing lists with the specific list\n  //   this.setState({lists: newLists})\n  //   // change view to itemList\n  //   this.props.history.push('/mylists');\n  // }\n  // async addNewList(newTitle) {\n  //   event.preventDefault();\n  //   let newList = {id: this.state.nextListId, title: newTitle, items: []};\n  //   let options = {\n  //     method: \"POST\",\n  //     headers: { \"Content-Type\": \"application/json\" },\n  //     body: JSON.stringify(newList)\n  //   };\n  //   try {\n  //     let response = await fetch(API_URL, options);\n  //     if (response.ok) {\n  //       let newLists = await response.json();\n  //       this.setState({\n  //         lists: [...this.state.lists, newList],\n  //         nextListId: this.state.newListId +1 });\n  //     } else {\n  //       console.log(\"ERROR:\", response.status, response.statusText);\n  //     }\n  //   } catch (err) {\n  //     console.log(\"EXCEPTION:\", err.message);\n  //   }\n  //   this.props.history.push('/mylists');\n  // }\n\n\n  // setEditedListId(editedListId) {\n  //   this.setState({ editedListId: editedListId });\n  // }\n  deleteItem(list_id, item_id) {\n    // console.log(list_id, item_id);\n    let newLists = [...this.state.lists];\n    let newList = newLists.find(l => l.id === list_id);\n    newList.item = newList.item.filter(i => i !== item_id);\n    this.setState({\n      lists: newLists\n    });\n  }\n\n  async deleteList(list_id) {\n    // DELETE list from database\n    let options = {\n      method: \"DELETE\"\n    };\n\n    try {\n      let response = await fetch(`${API_URL}/${list_id}`, options);\n\n      if (response.ok) {\n        let newLists = await response.json();\n        let newIx = newLists.findIndex(l => l.id === list_id);\n        newLists.splice(newIx, 1); // upon success, update tasks\n\n        this.setState({\n          lists: newLists\n        });\n      } else {\n        console.log(\"ERROR:\", response.status, response.statusText);\n      }\n    } catch (err) {\n      // upon failure, show error message\n      console.log(\"EXCEPTION:\", err.message);\n    }\n  } // deleteList(list_id) {  \n  //   let newLists = [...this.state.lists]\n  //   let newIx = newLists.findIndex((l) => l.id === list_id);\n  //   newLists.splice(newIx, 1)\n  //   this.setState({lists: newLists})\n  //   // console.log(newLists)\n  // }\n\n\n  handleEditList(list_id) {\n    let newLists = [...this.state.lists];\n    let newIx = newLists.findIndex(l => l.id === list_id);\n    let newList = newLists[newIx];\n    this.setState({\n      list: newList\n    });\n    console.log(newList);\n  } // showButtons(event) {\n  //   event.preventDefault();\n  //   // let boolean= (this.state.isShown = !this.state.isShown);\n  //   this.setState({isShown: boolean}) \n  //   }\n\n\n  saveList(list_id, newTitle, newItems) {\n    let newLists = [...this.state.lists];\n    let newList = newLists.find(l => l.id === list_id);\n    newList.title = newTitle;\n    newList.item = newItems;\n    this.setState({\n      lists: newLists\n    });\n    this.props.history.push('/mylists');\n  } // toggleLogIn(event) {\n  //   event.preventDefault();\n  //   let boolean = (this.state.showLogIn = !this.state.showLogIn);\n  //     this.setState({showLogIn: boolean}) \n  // }\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(Router, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: this.state.showLogIn ? 'false' : 'true',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Navbar, {\n      bg: \"info\",\n      expand: \"lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(NavLink, {\n      to: \"/\",\n      exact: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 38\n      }\n    }, /*#__PURE__*/React.createElement(NavbarBrand, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 60\n      }\n    }, \"INVENTARIUM\"))), /*#__PURE__*/React.createElement(Button, {\n      variant: \"info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(NavLink, {\n      to: \"/mylists\",\n      exact: true,\n      activeClassName: \"selected\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 38\n      }\n    }, \"My Lists\")), /*#__PURE__*/React.createElement(Button, {\n      variant: \"info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(NavLink, {\n      to: \"/addlist\",\n      activeClassName: \"selected\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 38\n      }\n    }, \"Create New List\")))), /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"/\",\n      exact: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Home, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(Route, {\n      path: \"/mylists\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(ItemList, {\n      setEditedListId: this.setEditedListId,\n      lists: this.state.lists,\n      deleteItem: this.deleteItem,\n      deleteList: list_id => this.deleteList(list_id),\n      handleEditList: i => this.handleEditList(i),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(Route, {\n      path: \"/additem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(InsertForm, {\n      editedListId: this.state.editedListId,\n      newItem: this.state.newItem,\n      addNewItem: this.addNewItem,\n      id: this.state.lists.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(Route, {\n      path: \"/addlist\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(NewList, {\n      addNewList: title => this.addNewList(title),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(Route, {\n      path: \"/editlist/:id\",\n      render: routeProps => {\n        let list = this.state.lists.find(l => l.id === routeProps.match.params.id);\n        return /*#__PURE__*/React.createElement(EditList, {\n          list: list,\n          saveList: (list_id, newTitle, newItems) => this.saveList(list_id, newTitle, newItems),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 26\n          }\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"/login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(ValidatedLoginForm, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Route, {\n      path: \"/sign-up\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(SignUp, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 21\n      }\n    })))), /*#__PURE__*/React.createElement(Error404View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 15\n      }\n    }))));\n  }\n\n}\n\nclass Home extends React.Component {\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }\n    }, \"Welcome\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"/login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 38\n      }\n    }, \"SIGN IN\")), /*#__PURE__*/React.createElement(Button, {\n      variant: \"info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"/sign-up\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 38\n      }\n    }, \"SIGN UP\"))));\n  }\n\n}\n\nexport default withRouter(App);","map":{"version":3,"sources":["/Users/feliciaboghiu/Desktop/FE/mvp/client/src/App.js"],"names":["React","ItemList","InsertForm","NewList","BrowserRouter","Router","Switch","Route","NavLink","Link","withRouter","Error404View","EditList","Button","Navbar","NavbarBrand","SignUp","ValidatedLoginForm","API_URL","App","Component","constructor","props","addNewList","newTitle","newList","id","state","nextListId","title","items","setState","lists","history","push","editedListId","list","isShown","showLogIn","componentDidMount","fetch","then","res","json","catch","error","console","log","addNewItem","newItem","list_id","newItems","item","newIx","findIndex","l","options","method","headers","body","JSON","stringify","newLists","response","ok","status","statusText","err","message","deleteItem","item_id","find","filter","i","deleteList","splice","handleEditList","saveList","render","setEditedListId","routeProps","match","params","Home"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport ItemList from './ItemList';\nimport InsertForm from './InsertForm';\nimport NewList from './NewList';\nimport { BrowserRouter as Router, Switch, Route, NavLink, Link } from \"react-router-dom\";\nimport { withRouter } from \"react-router\";\nimport Error404View from './Error404View';\nimport EditList from './EditList';\nimport Button from 'react-bootstrap/Button';\nimport Navbar from 'react-bootstrap/Navbar';\n// import Form from 'react-bootstrap/Form';\nimport { NavbarBrand } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import Login from \"./components/login.js\";\nimport SignUp from \"./components/signUp.js\";\nimport ValidatedLoginForm from \"./components/validatedLoginForm.js\";\n\n\nconst API_URL = \"/inventarium/lists\";\n\n// const TEST_ITEMS = [\n//   { id: 1, title: 'Albums', name: [\"The Beatles - Sgt. Pepper' Lonely Hearts Club Band\", 'The Beach Boys - Pet Sounds', \"The Beatles - Revolver\", 'Bob Dylan - Highway 61 Revisited', \"Marvin Gaye - What's Going On\", 'The Rolling Stones - Exile on Main Street']},\n//   { id: 2, title: 'Films', name: ['Good Will Hunting', 'The Royal Tenenbaums', \"Matrix\", \"The Godfather\", \"Fight Club\", \"Pulp Fiction\"]},\n//   { id: 3, title: \"Pantry\", name: ['Wild Rice', \"Black Beans\", 'Toilet paper', 'Cat food', 'Condensed Milk']}\n// ];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n      this.state = {\n        lists: [],\n        newList: \"\",\n        nextListId: 6,\n        editedListId: null,\n        list: null,\n        isShown: false,\n        showLogIn: true\n      };\n    }\n\n  componentDidMount() {\n    fetch(API_URL)\n      .then(res => res.json())\n      .then(json => {\n        // Upon success, update lists\n        this.setState({ lists: json });\n      })\n      .catch(error => {\n        // upon failure, show error message\n        console.log(\"Error\")\n      });\n  }\n\n  async addNewItem(newItem, list_id) {\n    // copy lists\n    let newItems = [...this.state.lists.item];\n    // find the index of the list using listId\n    let newIx = newItem.findIndex((l) => l.id === list_id);\n    // get that specific list using the index\n    let newList = newItems[newIx]\n    // add newItem to that list  \n    newList.items.push(newItem)\n\n    // POST\n    let options = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(newLists)\n    };\n\n  try {\n    let response = await fetch(API_URL, options);\n    if (response.ok) {\n    let newLists = await response.json();\n    this.setState({ lists: newLists });\n    } else {\n      console.log(\"ERROR:\", response.status, response.statusText);\n      }\n    } catch (err) {\n      console.log(\"EXCEPTION:\", err.message);\n  }\n    this.props.history.push('/mylists');\n}\n\n  // addNewItem = (newItem, list_id) => {\n  //   // copy lists\n  //   let newLists = [...this.state.lists];\n  //   // find the index of the list using list_id\n  //   let newIx = newLists.findIndex((l) => l.id === list_id);\n  //   // get that specific list using the index\n  //   let newList = newLists[newIx];\n  //   // add newItem to that list  \n  //   newList.item.push(newItem)\n  //   // update state replacing lists with the specific list\n  //   this.setState({lists: newLists})\n  //   // change view to itemList\n  //   this.props.history.push('/mylists');\n  // }\n\n  // async addNewList(newTitle) {\n  //   event.preventDefault();\n\n  //   let newList = {id: this.state.nextListId, title: newTitle, items: []};\n  //   let options = {\n  //     method: \"POST\",\n  //     headers: { \"Content-Type\": \"application/json\" },\n  //     body: JSON.stringify(newList)\n  //   };\n\n  //   try {\n  //     let response = await fetch(API_URL, options);\n  //     if (response.ok) {\n  //       let newLists = await response.json();\n  //       this.setState({\n  //         lists: [...this.state.lists, newList],\n  //         nextListId: this.state.newListId +1 });\n  //     } else {\n  //       console.log(\"ERROR:\", response.status, response.statusText);\n  //     }\n  //   } catch (err) {\n  //     console.log(\"EXCEPTION:\", err.message);\n  //   }\n  //   this.props.history.push('/mylists');\n  // }\n\n  addNewList = (newTitle) => {\n    let newList = {id: this.state.nextListId, title: newTitle, items: []}\n    this.setState({\n      lists: [...this.state.lists, newList],\n      nextListId: this.state.nextListId + 1\n    });\n    // Redirect to '/mylists'\n    this.props.history.push('/mylists');\n  }\n\n  // setEditedListId(editedListId) {\n  //   this.setState({ editedListId: editedListId });\n  // }\n\n  deleteItem(list_id, item_id) {\n    // console.log(list_id, item_id);\n    let newLists = [...this.state.lists]\n    let newList = newLists.find((l) => l.id === list_id);\n    newList.item = newList.item.filter((i) => i !== item_id);\n    this.setState({lists: newLists})\n  }\n\n\n  async deleteList(list_id) {\n    // DELETE list from database\n    let options = {\n      method: \"DELETE\"\n    };\n    \n    try {\n      let response = await fetch(`${API_URL}/${list_id}`, options);\n      if (response.ok) {\n        let newLists = await response.json();\n        let newIx = newLists.findIndex((l) => l.id === list_id);\n        newLists.splice(newIx, 1)\n        // upon success, update tasks\n        this.setState({ lists: newLists });\n      } else {\n        console.log(\"ERROR:\", response.status, response.statusText);\n      }\n    } catch (err) {\n      // upon failure, show error message\n      console.log(\"EXCEPTION:\", err.message);\n    }\n  }\n  // deleteList(list_id) {  \n  //   let newLists = [...this.state.lists]\n  //   let newIx = newLists.findIndex((l) => l.id === list_id);\n  //   newLists.splice(newIx, 1)\n  //   this.setState({lists: newLists})\n  //   // console.log(newLists)\n  // }\n\n  handleEditList(list_id) {\n    let newLists = [...this.state.lists]\n    let newIx = newLists.findIndex((l) => l.id === list_id);\n    let newList = newLists[newIx];\n    this.setState({list: newList})\n    console.log(newList);\n  }\n\n  // showButtons(event) {\n  //   event.preventDefault();\n  //   // let boolean= (this.state.isShown = !this.state.isShown);\n  //   this.setState({isShown: boolean}) \n  //   }\n\n  saveList(list_id, newTitle, newItems) {\n    let newLists = [...this.state.lists];\n    let newList = newLists.find((l) => l.id === list_id);\n    newList.title = newTitle;\n    newList.item = newItems;\n    this.setState({lists: newLists})\n    this.props.history.push('/mylists');\n  }\n\n  // toggleLogIn(event) {\n  //   event.preventDefault();\n  //   let boolean = (this.state.showLogIn = !this.state.showLogIn);\n  //     this.setState({showLogIn: boolean}) \n  // }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"container\">\n        <div className={this.state.showLogIn ? 'false' : 'true'}>\n\n            <Navbar bg='info' expand=\"lg\">\n              <Button variant=\"info\"><NavLink to='/' exact><NavbarBrand>INVENTARIUM</NavbarBrand></NavLink></Button>\n              <Button variant=\"info\"><NavLink to='/mylists' exact activeClassName='selected'>My Lists</NavLink></Button>\n              <Button variant=\"info\"><NavLink to='/addlist' activeClassName='selected'>Create New List</NavLink></Button>\n            </Navbar>\n          </div>\n              \n            <Switch> \n              <Route path='/' exact>\n                <Home />\n              </Route>\n\n              <Route path='/mylists'>\n                <ItemList\n                setEditedListId={this.setEditedListId}\n                lists={this.state.lists}\n                deleteItem={this.deleteItem}\n                deleteList={(list_id) => this.deleteList(list_id)}\n                handleEditList={(i) => this.handleEditList(i)} />\n              </Route>\n\n              <Route path='/additem'> \n                <InsertForm editedListId={this.state.editedListId}\n                newItem={this.state.newItem}\n                addNewItem={this.addNewItem}\n                id={this.state.lists.id}/>\n              </Route>\n\n              <Route path='/addlist'>\n                <NewList addNewList={title => this.addNewList(title)} />\n              </Route>\n\n              <Route path='/editlist/:id' render={\n                (routeProps) => {\n                  let list = this.state.lists.find((l) => l.id === routeProps.match.params.id);\n                  return <EditList list={list}\n                  saveList={(list_id, newTitle, newItems) => this.saveList(list_id, newTitle, newItems)}\n                  />\n                }\n              } />\n              \n              <div>\n                <div>\n                  <Route path='/login'>\n                    <ValidatedLoginForm />\n                  </Route>\n                  <Route path='/sign-up'>\n                    <SignUp />\n                  </Route>\n                </div>\n              </div>\n\n              <Error404View />\n\n            </Switch>\n      </div>\n      </Router>\n    );\n  }\n}\n\nclass Home extends React.Component {\n  render() {\n    return(\n      <div className=\"text-center\">\n        <h1>Welcome</h1>\n        <div>\n              <Button variant=\"info\"><Link to=\"/login\">SIGN IN</Link></Button>\n              <Button variant=\"info\"><Link to=\"/sign-up\">SIGN UP</Link></Button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default withRouter(App);"]},"metadata":{},"sourceType":"module"}